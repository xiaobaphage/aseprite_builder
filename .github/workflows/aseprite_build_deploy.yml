name: Build and Release Aseprite

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'  # 每天午夜检查更新
  push:
    tags:
      - 'v*'  # 仅响应语义化版本标签

env:
  BUILD_TYPE: Release
  SKIA_VERSION: m124  # 根据实际版本调整

jobs:
  check-version:
    name: 版本检查
    runs-on: ubuntu-latest
    outputs:
      latest_tag: ${{ steps.version_info.outputs.latest_tag }}
      should_build: ${{ steps.should_build.outputs.should_build }}
    steps:
    - name: 获取最新版本信息
      id: version_info
      run: |
        data=$(curl -sL https://api.github.com/repos/aseprite/aseprite/releases/latest)
        LATEST_TAG=$(echo "${data}" | jq -r '.tag_name')
        VERSION_BODY=$(echo "${data}" | jq -r '.body')

        echo "latest_tag=${LATEST_TAG}" >> $GITHUB_OUTPUT
        echo "version_body<<EOF" >> $GITHUB_OUTPUT
        echo "$VERSION_BODY" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: 检查是否需要构建
      id: should_build
      if: github.event_name == 'workflow_dispatch' || steps.version_check.outputs.cache_hit != 'true'
      run: echo "should_build=true" >> $GITHUB_OUTPUT

  build-aseprite:
    name: 跨平台编译
    needs: check-version
    if: ${{ needs.check-version.outputs.should_build }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
      fail-fast: false
    steps:
    - name: 安装系统依赖
      run: |
        if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
          sudo apt update && sudo apt install -y \
            cmake ninja-build libxcursor-dev libxi-dev libgl1-mesa-dev libfontconfig-dev
        elif [ "${{ matrix.os }}" = "macos-latest" ]; then
          brew install ninja p7zip
        fi

    - name: 获取 Skia 缓存
      id: skia_cache
      uses: actions/cache@v3
      with:
        path: skia
        key: skia-${{ matrix.os }}-${{ env.SKIA_VERSION }}

    - name: 下载 Skia
      if: steps.skia_cache.outputs.cache_hit != 'true'
      run: |
        curl -L "https://github.com/aseprite/skia/releases/download/${env.SKIA_VERSION}/skia-${env.SKIA_VERSION}-${{ matrix.os }}.zip" -o skia.zip
        unzip skia.zip -d skia

    - name: 获取源码
      run: |
        curl -L ${{ needs.check-version.outputs.download_url }} -o Aseprite.zip
        unzip Aseprite.zip -d aseprite
        mkdir aseprite/build

    - name: 配置构建环境
      working-directory: aseprite/build
      run: |
        cmake -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
          -DLAF_BACKEND=skia \
          -DSKIA_DIR=$(realpath ../../skia) \
          -G Ninja ..

    - name: 执行编译
      working-directory: aseprite/build
      run: ninja aseprite

    - name: 生成发布包
      working-directory: aseprite/build/bin
      run: |
        echo "[Portable]" > aseprite.ini
        7z a Aseprite-${{ needs.check-version.outputs.latest_tag }}-${{ runner.os }}.zip *

    - name: 创建发布
      uses: softprops/action-gh-release@v2
      with:
        tag_name: "v${{ needs.check-version.outputs.latest_tag }}"
        release_name: "Aseprite v${{ needs.check-version.outputs.latest_tag }}"
        body: |
          ${process.env.VERSION_BODY}
          构建平台:
          - ${{ matrix.os }}
          构建类型: ${{ env.BUILD_TYPE }}
        files: |
          aseprite/build/bin/Aseprite-${{ needs.check-version.outputs.latest_tag }}-windows-latest.zip
          aseprite/build/bin/Aseprite-${{ needs.check-version.outputs.latest_tag }}-ubuntu-latest.zip
          aseprite/build/bin/Aseprite-${{ needs.check-version.outputs.latest_tag }}-macOS-latest.zip
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

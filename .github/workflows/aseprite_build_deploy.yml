name: Build and deploy Aseprite

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'
  push:
    branches:
      - master
      - fix

env:
  BUILD_TYPE: Release

jobs:
  check-version:
    name: Check latest Aseprite release
    runs-on: ubuntu-latest
    outputs:
      download_url: ${{ steps.version_info.outputs.download_url }}
      latest_tag: ${{ steps.version_info.outputs.latest_tag }}
      should_build: ${{ steps.should_build.outputs.should_build }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
    - name: Get latest version info
      id: version_info
      run: |
        data=$(curl -sL https://api.github.com/repos/aseprite/aseprite/releases/latest)
        LATEST_TAG=$(echo "${data}" | jq -r '.tag_name')
        DOWNLOAD_URL=$(echo "${data}" | jq -r '.assets[].browser_download_url' | grep -i 'source')
        VERSION_INFO=$(echo "${data}" | jq -r '.body')
        echo "latest_tag=${LATEST_TAG}" >> $GITHUB_OUTPUT
        echo "download_url=${DOWNLOAD_URL}" >> $GITHUB_OUTPUT
        echo "version_info<<EOF" >> $GITHUB_OUTPUT
        echo "$VERSION_INFO" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    - name: Load version from cache
      id: version_check
      uses: actions/cache@v4
      with:
        path: version_cache.txt
        key: aseprite-${{ steps.version_info.outputs.latest_tag }}
    - name: Should we start new build?
      id: should_build
      if: github.event_name == 'workflow_dispatch' || github.ref == 'refs/heads/fix' || steps.version_check.outputs.cache-hit != 'true'
      run: echo "should_build=true" >> $GITHUB_OUTPUT
    - name: Create Release
      id: create_release
      if: steps.should_build.outputs.should_build == 'true'
      uses: actions/create-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version_info.outputs.latest_tag }}
        release_name: Release Aseprite ${{ steps.version_info.outputs.latest_tag }}
        body: ${{ steps.version_info.outputs.version_info }}
        draft: true
        prerelease: false

  build-aseprite:
    name: Build Aseprite
    needs: check-version
    if: ${{ needs.check-version.outputs.should_build == 'true' }}
    runs-on: ${{ matrix.os }}
    strategy:
       matrix:
         os: [windows-latest]
       fail-fast: false
    steps:
      - name: (Windows) Install dependencies
        if: matrix.os == 'windows-latest'
        uses: seanmiddleditch/gha-setup-ninja@v3
      
      - name: Install 7zip (Windows)
        if: matrix.os == 'windows-latest'
        run: choco install 7zip -y

      - name: Get Skia from cache
        id: skia-cache
        uses: actions/cache@v4
        with:
          path: skia
          key: skia-${{ matrix.os }}-cache
      
      - name: Download Skia
        if: steps.skia-cache.outputs.cache-hit != 'true'
        run: |
          $skiaURL = "https://github.com/aseprite/skia/releases/download/m124-08a5439a6b/Skia-${{ matrix.os }}-Release-x64.zip"
          if ("${{ matrix.os }}" -eq "ubuntu-latest") {
            $skiaURL = "https://github.com/aseprite/skia/releases/download/m124-08a5439a6b/Skia-${{ matrix.os }}-Release-x64.zip"
          }
          curl -o skia.zip -L $skiaURL
          7z x skia.zip -oskia
        shell: pwsh

      - name: Download Aseprite source
        run: |
          curl -o aseprite-source.zip -L "${{ needs.check-version.outputs.download_url }}"
          7z x aseprite-source.zip -oaseprite
          mkdir -p aseprite/build

      - name: Setup Visual Studio
        if: matrix.os == 'windows-latest'
        uses: seanmiddleditch/gha-setup-vsdevenv@v4

      - name: Configure CMake
        working-directory: aseprite/build
        run: |
          cmake `
            -DCMAKE_BUILD_TYPE=$env:BUILD_TYPE `
            -DLAF_BACKEND=skia `
            -DSKIA_DIR="${{ github.workspace }}/skia" `
            -DSKIA_LIBRARY_DIR="${{ github.workspace }}/skia/out/Release-x64" `
            -G Ninja ..
        shell: pwsh

      - name: Build with Ninja
        working-directory: aseprite/build
        run: ninja aseprite

      - name: Prepare artifacts
        working-directory: aseprite/build/bin
        run: |
          # Create portable marker
          echo "; Portable configuration" > aseprite.ini
          # Clean unnecessary files
          rm -f gen.exe modp_b64.exe *.pdb

      - name: Package artifact
        working-directory: aseprite/build/bin
        run: 7z a "Aseprite-${{ needs.check-version.outputs.latest_tag }}-${{ runner.os }}.zip" *

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.check-version.outputs.upload_url }}
          asset_path: aseprite/build/bin/Aseprite-${{ needs.check-version.outputs.latest_tag }}-${{ runner.os }}.zip
          asset_name: Aseprite-${{ needs.check-version.outputs.latest_tag }}-${{ runner.os }}.zip
          asset_content_type: application/zip
